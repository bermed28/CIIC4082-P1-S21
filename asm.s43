#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label
        ORG     01c00h

;Digits to represent
digitH  db             0xFC, 0x60, 0xdb, 0xf1, 0x67, 0xB7, 0xBF, 0xE0, 0xFF, 0xE7
digitL  db              0x28,   0,    0,    0,    0,    0,    0,    0,    0,   0

;Addresses for LCD Segments
segmentsHi        dw  0x0A29, 0x0A25, 0x0A23, 0x0A32, 0x0A2E, 0x0A27
segmentsL         dw  0x0A2A, 0x0A26, 0x0A24, 0x0A33, 0x0A2F, 0x0A28

;digitL  db             0x28,    0x20,    0x00,    0x00,    0x00,    0x00 
        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack


SetupPorts:
        bic.b   #0xFF,&P1SEL0           ; Set PxSel0 and PxSel1 to digital I/O
        bic.b   #0xFF,&P1SEL1           ; Digital I/O is the default

	mov.b   #11111001B,&P1DIR       ; Set P1.1 and P1.2 for input
	mov.b   #00000110B,&P1REN       ; Activate P1.1 and P1.2 programable
                                        ; pull-up/pull-down resistors
	bis.b   #00000110B,&P1OUT       ; Set resistors for P1.1 and P1.2 as pull down
        bic.b   #0x01,&P1OUT            ; Clear P1.0 and P9.7 output latch to

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
    
        ;Enable LCD Segments 0 - 2; 26-43
        
        MOV.W   #0xffff, &LCDCPCTL0
        MOV.W   #0xfc3f, &LCDCPCTL1
        MOV.W   #0x0fff, &LCDCPCTL2
        
        mov    #0xFFFF, R10
        

UnlockGPIO:                           ;DIsbale GPIO power-on default
        bic.w   #LOCKLPM5, &PM5CTL0   ; high-impedance mode to activate 
                                      ; previously configured port settings

        MOV.W   #0x041e, &LCDCCTL0 ;Bin number to set up bits to control LCD and initialize

        MOV.W   #0x0208,&LCDCVCTL  ;VLCD generated interally, V2-V4 gen interlan, V5 to ground, set VLCD to 2.60v, enabled charge pump and select reference
        MOV.W   #0x8000,&LCDCCPCTL ;clock synch enabled

        MOV.W   #2,&LCDCMEMCTL  ;clear LCD memory

        BIS.W   #1, &LCDCCTL0 ; Turn on LCD
        
        MOV.W   #2,&LCDCMEMCTL  ;clear LCD memory
         
        ;;Turn on all segments on LCD
        ;CLR    R15
        
         MOV.B  #0, R5          ;Track index for digit to draw
         MOV.B  #0, R14         ;Track index for segment to position in

calc:
         MOV.B  &P1IN,R4        ;Reads if one of the pins have been pressed
         call   #delay
         and.b  #00000110B,R4
         CMP.B  #4,R4           ;Left button pressed.
         JEQ    incNum          ;Increase the number in current segment
         CMP.B  #00000010B,R4   ;Right button is pressed.
         JEQ    changeSegment   ;Change segment to the right
         JMP    calc
        
delay:
         dec    R10
         jnz    delay
         mov    #0xFFFF, R10
         ret

incNum:
        
         push   R8            ;To restore default value
         
         MOV    #segmentsHi, R8 ;Store beginning address of segments in R8
         add    R14, R8       ;Add the index everytime to position ourselves in correct segment
         mov    0(R8),  R8    ;Move that value (segment) and store it in R8
         MOV.B  digitH(R5), 0(R8)       ;Draw digit at said segment
         INC    R5                      ;Increase digit index

         pop    R8             ;Restore R8 original value
         JMP    calc                    ;Jmp to calc

changeSegment:
         INC    R14             ;Increase segment index
         MOV.B  #0, R5          ;Reset digit index
         JMP    calc            
         
        
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
        END
