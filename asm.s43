#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label
        ORG     01c00h

;Digits to represent
digitH  db             0xFC, 0x60, 0xdb, 0xf1, 0x67, 0xB7, 0xBF, 0xE0, 0xFF, 0xE7
digitL  db              0x28,   0,    0,    0,    0,    0,    0,    0,    0,   0
result  db               0,0,0,0,0,0,0 ;added another zero
        ALIGN 1

;Addresses for LCD Segments
segmentsHi        dw  0x0A29, 0x0A25, 0x0A23, 0x0A32, 0x0A2E, 0x0A27
segmentsL         dw  0x0A2A, 0x0A26, 0x0A24, 0x0A33, 0x0A2F, 0x0A28

;Operators to represent
;+ = 0
;- = 1
;/ = 2
;* = 3
operatorsHi db 0x03, 0x03, 0x00, 0x03 ; High Bytes Table
operatorsLo db 0x50,   0,  0x28, 0xFA ; Low Bytes Table

errorHi   db      0x9F, 0xCF, 0xCF, 0xFC, 0xCF
errorLo   db      0x00, 0x02, 0x02, 0x00, 0x02

;State handler
state   db      0

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack200/


SetupPorts:
        bic.b   #0xFF,&P1SEL0           ; Set PxSel0 and PxSel1 to digital I/O
        bic.b   #0xFF,&P1SEL1           ; Digital I/O is the default

                mov.b   #11111001B,&P1DIR       ; Set P1.1 and P1.2 for input
                mov.b   #00000110B,&P1REN       ; Activate P1.1 and P1.2 programable
                                        ; pull-up/pull-down resistors
                bis.b   #00000110B,&P1OUT       ; Set resistors for P1.1 and P1.2 as pull down
        bic.b   #0x01,&P1OUT            ; Clear P1.0 and P9.7 output latch to

UnlockGPIO:                           ;DIsbale GPIO power-on default
        bic.w   #LOCKLPM5, &PM5CTL0   ; high-impedance mode to activate
                                      ; previously configured port settings

        ;Enable LCD Segments 0 - 2; 26-43

        MOV.W   #0xffff, &LCDCPCTL0
        MOV.W   #0xfc3f, &LCDCPCTL1
        MOV.W   #0x0fff, &LCDCPCTL2

        MOV.W   #0x041e, &LCDCCTL0 ;Bin number to set up bits to control LCD and initialize

        MOV.W   #0x0208,&LCDCVCTL  ;VLCD generated interally, V2-V4 gen interlan, V5 to ground, set VLCD to 2.60v, enabled charge pump and select reference
        MOV.W   #0x8000,&LCDCCPCTL ;clock synch enabled

        MOV.W   #2,&LCDCMEMCTL  ;clear LCD memory

        BIS.W   #1, &LCDCCTL0 ; Turn on LCD

        MOV.W   #2,&LCDCMEMCTL  ;clear LCD memory

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

startSystem:
        MOV.W   #2,&LCDCMEMCTL  ;clear LCD memory
        mov    #0xFFFF, R10
        MOV.B  #0, R5          ; track index of digit selected
        MOV.B  #0, R4          ; track which button is pressed
        MOV.B  #0, R14         ; track index of segment array

        MOV.B  #0x0099, R13          ; Registro utilizado para verificar cual de las
                                 ; subrutinas aritmeticas seran invocadas. #99 indica que no se ha escogido una operacion

        MOV.W  #0, R12          ; Registro donde se guardara el valor del primer numero
        MOV.W  #0, R11          ; Registro donde se guardara el segundo numero
        MOV.W  #0, R9           ; Registro donde se guardara el resultado
        MOV.B  #0, R8           ; indica cual de los 3 estados de la aplicacion esta
        MOV.B  #0, R7


;Objetivo: Maneja la logica de mostrar el primer valor apropiado en pantalla una vez se encienda o se cambie de estado
;Precondiciones: Se invoca en todos los estados
;Postcondiciones: Invoca subrutina que muestra zero o operador de suma en pantalla
;Autor: Guillermo Betancourt, Jose Biescas, Fernando Bermudez y Veronica Bernier
initialValue:
         CMP.b  #1,r8
         JEQ    operator
         cmp.b  #4, R8
         JEQ    MainCheckState
         jmp    zero



zero:
         push   R6            ;To restore default value
         push   R7            ;To restore default value later

         MOV.w    #segmentsHi, R6 ;Store beginning address of segments in R6
         MOV.w    #segmentsL, R7 ;Store beginning address of segmentsLo in R7

         add.w    R14, R6       ;Add the index everytime to position ourselves in correct segment
         add.w    R14, R7

         mov.w    0(R6),  R6    ;Move that value (segment) and store it in R6
         mov.w    0(R7),  R7    ;Same for R7

         MOV.B  digitH(R5), 0(R6)       ;Draw digit at said segment
         MOV.B  digitL(R5), 0(R7)

         pop    R7 ;restore
         pop    R6 ;restore
         ;INC    R5
         jmp    MainCheckState



operator:
         push   R6            ;To restore default value
         push   R7            ;To restore default value later

         MOV.w    #segmentsHi, R6 ;Store beginning address of segments in R6
         MOV.w    #segmentsL, R7 ;Store beginning address of segmentsLo in R7

         add.w    R14, R6       ;Add the index everytime to position ourselves in correct segment
         add.w    R14, R7

         mov.w    0(R6),  R6    ;Move that value (segment) and store it in R6
         mov.w    0(R7),  R7    ;Same for R7

         MOV.B operatorsHi(R5), 0(R6)       ;Draw digit at said segment
         MOV.B operatorsLo(R5), 0(R7)

         pop    R7 ;restore
         pop    R6 ;restore
         ;INC    R5
         jmp    MainCheckState

;Objetivo: Verifica el estado actual de la operacion para manejar las acciones de los botones apretados
;Precondiciones: R8 tiene el valor del estado
;Postcondiciones: Invoca subrutina del estado requerido.
;Autor: Guillermo Betancourt
;Fecha: 3/11/2021
MainCheckState:
         CMP.B  #0, R8
         JEQ    calc
         CMP.B  #1, R8
         JEQ    arthmloop
         CMP.B  #2, R8
         JEQ    calc
         CMP.B  #3, R8
         JEQ    showResult
         CMP.B  #4, R8
         JEQ    startSystem ;Clean everything to restart operations

;Objetivo: Maneja la logica del boton apretado en la aplicacion de la calculadora.
;Precondiciones: puede ser invocado en cualquier estado.
;Postcondiciones: Guarda en el Registro R4 el boton apretado para escribir operador en pantalla
;Autor: Jose Biescas
;Fecha: 3/11/2021
calc:
         MOV.B  &P1IN,R4        ;Reads if one of the pins have been pressed
         call   #delay
         and.b  #00000110B,R4
         CMP.B  #4,R4           ;Left button pressed.
         JEQ    startIncNum     ;Increase the number in current segment
         CMP.B  #2,R4           ;Right button is pressed.
         JEQ    startChangeSegment   ;Change segment to the right
         JMP    calc

;Objetivo: Reset el indice guardado en R5 cuando su valor sea 9 para poder hacer un loop a traves de los digitos, si no, incrementar R5 y continuar el proceso.
;Precondiciones: R8 debe ser igual a 0 o 2, indicando que estamos escogiendo los digitos a utilizar
;Postcondiciones: No hay postcondiciones
;Autor: Jose Biescas
;Fecha: 3/16/2021
checkDigit:

         CMP.B  #9, R5
         JEQ    resetIndex              ;Reset index if we're at 9 so that we can loop from 0-9
         INC    R5                      ;Increase digit index
         ret

;Objetivo: Llamar incNum
;Precondiciones: Estar en el estado 0 o 2
;Postcondiciones: No hay
;Autor: Jose Biescas
;Fecha: 3/13/2021
startIncNum:

         call   #checkDigit

         call   #incNum

         jmp    calc

;Objetivo: Dibujar los Hi and Lo bytes de los digitos en el segmento correspondiente
;Precondiciones: R14 contiene el segmento en donde se van a dibujar los digitos, R5 contiene el indice del digito a dibujar
;Postcondiciones: Los registros R6 y R7 no tendran efectos secundarios. El registro R5 no debe ser afectado por los otros estados del programa
;Autor: Jose Biescas
;Fecha: 3/11/2021
incNum:

         push   R6            ;To restore default value
         push   R7            ;To restore default value later

         MOV.w    #segmentsHi, R6 ;Store beginning address of segments in R6
         MOV.w    #segmentsL, R7 ;Store beginning address of segmentsLo in R7

         add.w    R14, R6       ;Add the index everytime to position ourselves in correct segment
         add.w    R14, R7

         mov.w    0(R6),  R6    ;Move that value (segment) and store it in R6
         mov.w    0(R7),  R7    ;Same for R7

         MOV.B  digitH(R5), 0(R6)       ;Draw digit at said segment
         MOV.B  digitL(R5), 0(R7)

         pop    R7 ;restore
         pop    R6 ;restore

         ret
;Objetivo: Re-iniciar el indice de R5, para eso de volver a 0 despues de llegar al 9, o volver a '+' despues de llegar a '*'
;Precondiciones:
;Postcondiciones:
;Autor: Jose Biescas
;Fecha: 3/13/2021
resetIndex:
         mov.b  #0, R5
         jmp    return


;Objetivo: Llamar changeSegment
;Precondiciones: Estar en el estado 0, 1, o 2
;Postcondiciones: No hay
;Autor: Jose Biescas
;Fecha: 3/13/2021
startChangeSegment:


         call   #translateLCD
         call   #changeSegment

         jmp    initialValue

;Objetivo: Incrementar el registro R14, para indicar el indice actual y se re-inicia el indice de los digitos/operadores
;Precondiciones: El boton derecho se debio tocar, solamente se llama si no estamos al final de los 3 digitos, o si escogimos operador
;Postcondiciones:
;Autor: Jose Biescas
;Fecha: 3/11/2021
changeSegment:
         CMP.B  #4, R14
         JEQ    changeState
         INCD.W    R14             ;Increase segment index
         MOV.B  #0, R5          ;Reset digit index


         ret



;Objetivo: Traducir los numeros escritos en la pantalla a un valor operable por el micro procesador.
;Precondiciones: Estar en el estado 0, 1, o 2. R14 indica si se sumara en centenas, decenas o unidades.
;Postcondiciones: Guarda en el Registro R12 el primer valor escrito y en R11 el segundo valor
;Autor: Guillermo Betancourt
;Fecha: 3/11/2021
translateLCD:
        mov R5, R6
        ;dec r6
        cmp.b  #3, R8
        jeq    retu
        cmp.b  #4, R8
        jeq    retu
        CMP.B  #0, R14
        jeq    addH
        CMP.B  #2, R14
        jeq    addD
        CMP.B  #4, R14
        jeq    addU


retu:
        nop
        ret


;Objetivo: Maneja la logica de traducir primer y segundo valor Utilizando suma de centenas se traduce el primer digito del numero escrito.
;Precondiciones: Estar en el estado 0 o 2
;Postcondiciones: Guarda en el Registro R12 el primer valor escrito y en R11 el segundo valor
;Autor: Guillermo Betancourt
;Fecha: 3/11/2021
addH:
        cmp.b #0, R8
        jeq   addfvH
        cmp.b #2, R8
        jeq   addsvH

;Objetivo:  Utilizando suma de centenas se traduce el primer digito del numero escrito.
;Precondiciones: Estar en el estado 0 o 2, R6 se utiliza como indice en un loop
;Postcondiciones: Guarda en el Registro R12 el primer valor escrito y en R11 el segundo valor
;Autor: Guillermo Betancourt
;Fecha: 3/11/2021
addfvH:
        cmp.b #0, R6
        jeq   retu
        add   #100, R12
        dec   R6
        jmp   addfvH



;Objetivo:  Utilizando suma de centenas se traduce el primer digito del numero escrito.
;Precondiciones: Estar en el estado 0 o 2, R6 se utiliza como indice en un loop
;Postcondiciones: Guarda en el Registro R12 el primer valor escrito y en R11 el segundo valor
;Autor: Guillermo Betancourt
addsvH:
        cmp.b #0, R6
        jeq   retu
        add   #100, R11
        dec   R6
        jmp   addsvH


;Objetivo: Maneja la logica de traducir primer y segundo valor Utilizando suma de decenas se traduce el primer digito del numero escrito.
;Precondiciones: Estar en el estado 0 o 2
;Postcondiciones: Guarda en el Registro R12 el primer valor escrito y en R11 el segundo valor
;Autor: Guillermo Betancourt
addD:

        cmp.b #0, R8
        jeq   addfvD
        cmp.b #2, R8
        jeq   addsvD

;Objetivo:  Utilizando suma de decenas se traduce el segundo digito del numero escrito.
;Precondiciones: Estar en el estado 0 o 2, R6 se utiliza como indice en un loop
;Postcondiciones: Guarda en el Registro R12 el primer valor escrito y en R11 el segundo valor
;Autor: Guillermo Betancourt
addfvD:
        cmp.b #0, R6
        jeq   retu
        add   #10, R12
        dec   R6
        jmp   addfvD

;Objetivo:  Utilizando suma de decenas se traduce el segundo digito del numero escrito.
;Precondiciones: Estar en el estado 0 o 2, R6 se utiliza como indice en un loop
;Postcondiciones: Guarda en el Registro R12 el primer valor escrito y en R11 el segundo valor
;Autor: Guillermo Betancourt
addsvD:

        cmp.b #0, R6
        jeq   retu
        add   #10, R11
        dec   R6
        jmp   addsvD


;Objetivo: Maneja la logica de traducir primer y segundo valor Utilizando suma de unidades se traduce el primer digito del numero escrito.
;Precondiciones: Estar en el estado 0 o 2
;Postcondiciones: Guarda en el Registro R12 el primer valor escrito y en R11 el segundo valor
;Autor: Guillermo Betancourt
addU:

        cmp.b #0, R8
        jeq   addfvU
        cmp.b #2, R8
        jeq   addsvU


;Objetivo:  Utilizando suma de unidades se traduce el tercer digito del numero escrito.
;Precondiciones: Estar en el estado 0 o 2, R6 se utiliza como indice en un loop
;Postcondiciones: Guarda en el Registro R12 el primer valor escrito y en R11 el segundo valor
;Autor: Guillermo Betancourt
;Fecha: 3/11/2021
addfvU:
        add   R6, R12
        jmp retu

;Objetivo:  Utilizando suma de unidades se traduce el tercer digito del numero escrito.
;Precondiciones: Estar en el estado 0 o 2, R6 se utiliza como indice en un loop
;Postcondiciones: Guarda en el Registro R12 el primer valor escrito y en R11 el segundo valor
;Autor: Guillermo Betancourt
;Fecha: 3/11/2021
addsvU:
        add   R6, R11
        jmp return


;TODO
;Objetivo: Incrementa el estado de la aplicacion para indicar un cambio en pantalla. Recupera los valores iniciales de R5 y R14 para escribir digitos en pantalla.
;Precondiciones: El R4 indica que se presiona el boton derecho para cambiar el estado luego de escribir 3 digitos o escribir operador.
;Postcondiciones:R5, R14 y la pantalla LCD son revalorados. Se brinca a escribir en pantalla
;Autor: Guillermo Betancourt
;Fecha: 3/13/2021
changeState:
       call     #delay
       inc.B R8
       mov.b #0, R5
       mov.b #0, R14
       MOV.W #2,&LCDCMEMCTL  ;clear LCD memory

       jmp initialValue



;Objetivo: Maneja la logica de mostrar en pantalla el operador al cambiar el estado.
;Precondiciones: Estar en el estado 1
;Postcondiciones: Guarda en el Registro R4 el boton apretado para escribir operador en pantalla
;Autor: Guillermo Betancourt
;Fecha: 3/11/2021
arthmloop:
        MOV.B  #0, R4
        MOV.B  &P1IN,R4        ;Reads if one of the pins have been pressed
        call   #delay
        and.b  #00000110B,R4
        CMP.B  #4,R4           ;Left button pressed.
        JEQ    startChangeOperator
        CMP.B  #2,R4           ;Right button is pressed
        JEQ    setOp
        JMP    arthmloop

;Objetivo: Reset el indice guardado en R5 cuando su valor sea 3 para poder hacer un loop a traves de las operaciones, si no, incrementar R5 y continuar el proceso.
;Precondiciones: R8 debe ser igual a 1, indicando que estamos escogiendo la opereacion a realizar
;Postcondiciones: No hay postcondiciones
;Autor: Jose Biescas
;Fecha: 3/16/2021
checkOperator:
         CMP.B  #3, R5
         JEQ    resetIndex              ;Reset index if we're at '*'
         INC    R5
         ret

;choose arthm op
setOp:
        MOV.B   operatorsLo(R5), R13
        CMP.B   #0x0099, R13
        JEQ     arthmloop
        jmp changeState

startChangeOperator:
        call    #checkOperator
        call    #changeOperator

        jmp     arthmloop



;Objetivo: Dibujar los simbolos de las operaciones en el primer segmento del LCD
;Precondiciones: R14 debe ser 0, R5 contiene el indice del operador a dibujar
;Postcondiciones: Los registros R6 y R7 no tendran efectos secundarios. El registro R5 no debe ser afectado por los otros estados del programa
;Autor: Jose Biescas
;Fecha: 3/13/2021
changeOperator:
         push   R6
         push   R7

         MOV.w    #segmentsHi,   R6
         MOV.w    #segmentsL,   R7
         add.w    R14, R6
         add.w    R14, R7

         mov.w    0(R6), R6
         mov.w    0(R7), R7

         MOV.B  operatorsHi(R5), 0(R6)
         MOV.B  operatorsLo(R5), 0(R7)

         pop    R7
         pop    R6

         ret


;Objetivo: Traduce el operador seleccionado en pantalla y invoca la subrutinas aritmetica.
;Precondiciones: Estar en el estado 3
;Postcondiciones: no hay pos condiciones.
;Autor: Jose Biescas y Guillermo Betancourt
;Fecha: 3/14/2021
showResult:
;we have to show value and reset registers
;we would verify R13 to check which op
         CMP.B  #0x50, R13
         JEQ    addition
         CMP.B  #0, R13
         JEQ    substraction
         CMP.B  #0x28, R13
         JEQ    division
         CMP.B  #0xFA, R13
         JEQ    multiplication
         jmp    showNumber


;Objetivo: Maneja la logica de mostrar el valor apropiado en pantalla, ya sea negativo o un digito mayor de 16 bits.
;Precondiciones: Estar en el estado  3
;Postcondiciones: Invoca subrutina que comienza el loop que muestra digitos en pantalla
;Autor: Guillermo Betancourt, Jose Biescas, Fernando Bermudez y Veronica Bernier
;Fecha: 3/14/2021
showNumber:
       mov.b    #0, R6                  ;R6: arreglo de digitos

       mov      #0, &0xA2A

       call     #considerNegative

       call     #extractDigits
       call     #extractOverflow


       mov      #0, R14
       jmp      display

;Objetivo:  Verificar si el resultado es negativo.
;Precondiciones: R9 es el valor del resultado
;Postcondiciones:
;Autor: Veronica Bernier
;Fecha: 3/14/2021
considerNegative:
       cmp.w    #0, R9
       jl       isNegative

       ret

isNegative:
       mov      #0x04, &0xA2A   ;show negative sign
       //mov      #0, &0xA29
       //TODO: turn positive
       xor.w    #0xFFFF, R9
       inc       R9
       //mov.w    #123, R9

       ret


;Objetivo:  A�adir los digitos del overflow de multiplicaci�n al arreglo R6 si hay overflow.
;Precondiciones: R10 es el valor del overflow.
;Postcondiciones:  R6 tendra los digitos del overflow si hay.
;Autor: Veronica Bernier
;Fecha: 3/14/2021
extractOverflow:
      cmp.w     #1, R10
      JGE       doExtractOverflow

      ret

;Objetivo:  A�adir los digitos del overflow de multiplicaci�n al arreglo R6.
;Precondiciones: R6 tiene los digitos del resultado.
;Postcondiciones:  R6 tendra los digitos del overflow si hay.
;Autor: Veronica Bernier
;Fecha: 3/14/2021
doExtractOverflow:
      call     #extractZeros
      push     R9
      mov.w    R10, R9
      call     #extractDigits
      pop       R9

      ret


;Objetivo:  A�adir 0s al arreglo de digitos result de no tener suficientes digitos.
;Precondiciones: R6 es el numero de digitos en result.
;Postcondiciones: El registro R6 sera 4 y habran 4 digitos en results.
;Autor: Ver�nica Bernier
;Fecha: 3/14/2021
extractZeros:
       cmp.b   #4, R6
       jl      keepExtractingZeros
       ret

;Objetivo:  A�adir 0s hasta que R6 llegue a 4.
;Precondiciones: R6 es el numero de digitos en result.
;Postcondiciones: El registro R6 sera 4 y habran 4 digitos en results.
;Autor: Ver�nica Bernier
;Fecha: 3/14/2021
keepExtractingZeros:
       inc     R6
       mov.b   #0, result(R6)
       cmp.b   #4, R6
       jl      keepExtractingZeros
       ret

;Objetivo:  Escribe los valores en pantalla utilizando las variables en memoria para accesar los digitos y segmentos del LCD. Utiliza R7 para iterar por la lista.
;Precondiciones: Estar en el estado 4
;Postcondiciones: Incrementa el R14 para mover el segmento y decrementa R6 para saber si faltan digitos por mostrar.
;Autor: Jose Biescas, Guillermo Betancourt, Fernando Bermudez y Veronica Bernier
;Fecha: 3/14/2021
display:
         push   R4
         push   R9

         MOV.w      #result, R7
         Add.w      R6, R7

         MOV.w    #segmentsHi,  R4
         MOV.w    #segmentsL,   R9
         add.w    R14, R4
         add.w    R14, R9
         mov.b    0(R7), R7
         mov.w    0(R4), R4
         mov.w    0(R9), R9

         MOV.B  digitH(R7), 0(R4)

         //MOV.B  digitL(R7), 0(R9)
         cmp.b  #0, R7
         jeq    displayLows

         pop    R9
         pop    R4


         dec    R6
         incd   R14
         cmp    #1, R6
         jge    display

         jmp    restartLoop

displayLows:
         MOV.B  digitL(R7), 0(R9)

         pop    R9
         pop    R4


         dec    R6
         incd   R14
         cmp    #1, R6
         jge    display

         jmp    restartLoop

;Objetivo: Sumar los valores en los registros R11 y R12
;Precondiciones: R12 contiene del primer valor y R11 el segundo
;Postcondiciones: El registro R9 guardara el resultado de la operacion. El registro R11 no sera alterado.
;Autor: Fernando J. Bermudez Medina y Guillermo Betancourt
;Fecha: 3/14/2021
addition:
        push    R11
        add     R12, R11
        mov     R11, R9
        pop     R11
        jmp showNumber

;Objetivo: Restar los valores en los registros R11 y R12
;Precondiciones: R12 contiene del primer valor y R11 el segundo
;Postcondiciones: El registro R9 guardara el resultado de la operacion. El registro R12 no sera alterado.
;Autor: Fernando J. Bermudez Medina
;Fecha: 3/14/2021
substraction:
        push    R12
        sub.w   R11, R12
        mov     R12, R9
        pop     R12
        jmp showNumber

;Objetivo: Verificar que valor entre los registros R11 y R12 es mayor para intercambiarlos y hacer la multiplicacion mas eficiente
;Precondiciones: R12 contiene del primer valor y R11 el segundo
;Postcondiciones: El registro R9 no tendra efectos secundarios. El registro R11 y R12 sera alterado de ser necesario.
;Autor: Fernando J. Bermudez Medina
;Fecha: 3/13/2021
multiplication:
        push    R11
        push    R12

        ;If one of our operators is 0, just put 0 in R9 and return
        cmp     #0x0, R11
        jz      multZero
        cmp     #0x0, R12
        jz      multZero

        cmp.w   R11, R12
        jn      swapSmallest            ;If R11 > R12, we swap the registers values



        mov.w   #0x0, R9                ;Set our result to 0
        mov.w   #0x0, R10               ;Set our overflow result to 0
        jmp     start

;Objetivo: Multiplicar los valores en los registros R11 y R12
;Precondiciones: R12 contiene del primer valor y R11 el segundo (intercambiados o no)
;Postcondiciones: El registro R9 tendra el valor resultante de la multiplicacion.
;Autor: Fernando J. Bermudez Medina
;Fecha: 3/13/2021
start:
        //Approach, sum number x (R12) a y (R11) amount of times to get multiplication
        //Example: 200 * 3 = sum 200 a total amount of 3 times
        add.w   R12, R9                 ; We use R9 to store our result
        cmp.w   #0x2710, R9
        jge     addOverflow             ; Add overflow for numbers larger than a word
        dec     R11                     ; Decrement our counter
        jz      finishM                 ; If we finished sum, return
        jmp     start                   ; If not, continue

;Objetivo: Guardar los primeros 2 digitos del resultado si tiene 6 digitos
;Precondiciones: R10 contiene la cantidad de 10,000s que contiene el resultado, R9 es el conteo hasta 10,000
;Postcondiciones: Los registros R10 y R9 no tendran efectos secundarios. El registro R11 no debe ser afectado por los otros estados del programa
;Autor: Ver�nica Bernier y Fernando J. Bermudez
;Fecha: 3/15/2021
addOverflow:
        inc     R10
        sub.w   #0x2710, R9
        dec     R11
        jz      finishM
        jmp     start

;Objetivo: Intercambiar los valores en los registros R11 y R12
;Precondiciones: R12 contiene del primer valor y R11 el segundo
;Postcondiciones: El registro R9 no tendra efectos secundarios. El registro R11 y R12 sera alterado.
;Autor: Fernando J. Bermudez Medina
;Fecha: 3/13/2021
swapSmallest:

        mov.w   R11, R9                 ; temp (R9) = R11
        mov.w   R12, R11                ; R11 = R12
        mov.w   R9, R12                 ; R12 = temp
        mov.w   #0x0, R9                ; Reset result to 0
        mov.w   #0x0, R10               ; Set our overflow result to 0
        jmp     start

;Objetivo: En el caso de que se multiplique por 0, se guarda como resultado 0
;Precondiciones: R12 contiene del primer valor y R11 el segundo, R11 o R12 contiene 0 como valor
;Postcondiciones: El registro R9 se guardara un 0. El registro R11 y R12 no sera alterado.
;Autor: Fernando J. Bermudez Medina
;Fecha: 3/13/2021
multZero:
        mov.w   #0x0, R9
        jmp     finishM

finishM:
        pop    R12
        pop    R11
        jmp showNumber

;Objetivo: Guardar la division de R12 entre R11 en R9 luego de validar que R11 no sea 0.
;Precondiciones: R12 contiene lel primer valor y R11 el segundo
;Postcondiciones: Los registros R11 y R12 no tendran efectos secundarios. El registro R9 sera alterado.
;Autor: Ver�nica Bernier
;Fecha: 3/12/2021
division:
        cmp.w   #1, R11
        jge     startDivision
        ;;If dividing by 0
        jmp     showError
        ;jmp     showNumber

;Objetivo: Demostrar que ocurrio un error al intentar de dividir por 0.
;Precondiciones: El segundo numero (R11) debe ser 0.
;Postcondiciones: Se mostrara la palabra ERROR en el LCD.
;Autor: Jose Biescas
;Fecha: 3/16/2021
showError:
         push   R4
         push   R9



         MOV.w    #segmentsHi,  R4
         MOV.w    #segmentsL,   R9
         add.w    R14, R4
         add.w    R14, R9

         mov.w    0(R4), R4
         mov.w    0(R9), R9

         MOV.B  errorHi(R11), 0(R4)
         MOV.B  errorLo(R11), 0(R9)


         pop    R9
         pop    R4


         inc    R11 ;;Use R11 since it is already 0
         incd   R14
         cmp    #5, R11
         jeq    restartLoop

         jmp    showError

;Objetivo: Comenzar el proceso de division entre R11 y R12
;Precondiciones: R12 contiene el primer valor y R11 el segundo. R9 incrementa con cada brinco.
;Postcondiciones: Los registros R11 y R12 no tendran efectos secundarios. El registro R9 sera alterado.
;Autor: Ver�nica Bernier
;Fecha: 3/12/2021
startDivision:
        push    R12                     ;we'll manipulate R12 (R12 / R11)
        mov.w   #0, R9                   ;R9 returns the coecient (result)
        sub.w   R11, R12
        cmp.w   #0, R12
        JGE     keepSubstracting
        pop     R12                      ;restore value
        jmp     showNumber

;Objetivo: Restar R11 a R12 hasta llegar a un valor negativo.
;Precondiciones: R12 contiene el primer valor y R11 el segundo. R9 incrementa con cada brinco.
;Postcondiciones: Los registros R11 y R12 no tendran efectos secundarios. El registro R9 sera alterado.
;Autor: Ver�nica Bernier
;Fecha: 3/12/2021
keepSubstracting:
        inc     R9
        sub.w   R11, R12
        cmp.w   #0, R12
        JGE     keepSubstracting
        pop     R12                      ;restore value
        jmp     showNumber

;Objetivo: Dado un valor, extraer cada digito en decimal.
;Precondiciones: R9 contiene el valor original. R6 se usa como arreglo.
;Postcondiciones: El registro R9 no tendra efectos secundarios. El registro R6 sera alterado.
;Autor: Ver�nica Bernier
;Fecha: 3/14/2021
extractDigits:
                        ;R7 contiene el valor completo
        push R9
        //mov.b   #0, R6                  ;R6: arreglo de digitos
        jmp     keepExtracting

;Objetivo: Dado un valor, extraer cada digito en decimal.
;Precondiciones: R9 contiene el valor original. R6 se usa como arreglo.
;Postcondiciones: El registro R9 no tendra efectos secundarios. El registro R6 sera alterado.
;Autor: Ver�nica Bernier
;Fecha: 3/14/2021
keepExtracting:
        call    #module10
        inc     R6
        mov.b   R7, result(R6)
        call    #division10
        mov.w   R7, R9
        cmp.w   #1, R9
        JGE     keepExtracting
        pop     R9
        ret

;Objetivo: Dividir el valor en el registro R9 por 10.
;Precondiciones: R9 contiene el valor original. R7 se usa temporalmente.
;Postcondiciones: El registro R9 no tendra efectos secundarios. El registro R7 sera alterado.
;Autor: Ver�nica Bernier
;Fecha: 3/14/2021
division10:
        push    R9                       ;we'll manipulate R9 (R9 / 10)
        mov.w   #0, R7                   ;R7 returns the coecient (result)
        sub.w   #10, R9
        cmp.w   #0, R9
        JGE     keepSubstractingDiv10
        pop     R9                      ;restore value
        ret

;Objetivo: Restar  10 al valor en el registro R9 hasta que sea negativo.
;Precondiciones: R9 contiene el valor original. R7 se usa temporalmente.
;Postcondiciones: El registro R9 no tendra efectos secundarios. El registro R7 sera alterado.
;Autor: Ver�nica Bernier
;Fecha: 3/14/2021
keepSubstractingDiv10:
        inc     R7
        sub.w   #10, R9
        cmp.w   #0, R9
        JGE     keepSubstractingDiv10
        pop     R9                      ;restore value
        ret

;Objetivo: Encontrar el residuo de R9 mod 10
;Precondiciones: R9 contiene el valor original. R7 se usa temporalmente.
;Postcondiciones: El registro R9 no tendra efectos secundarios. El registro R7 sera alterado.
;Autor: Ver�nica Bernier
;Fecha: 3/14/2021
module10:
        push    R9                       ;we'll manipulate R9(R9 mod 10)
        sub.w   #10, R9
        cmp.w   #0, R9
        JGE     keepSubstractingMod10
        add.w   #10, R9
        mov.w   R9, R7                  ;R7 returns the "residuo" (result)
        pop     R9                      ;restore value
        ret

;Objetivo: Restar  10 al valor en el registro R9 hasta que sea negativo y devolver el residuo en R7.
;Precondiciones: R9 contiene el valor original. R7 se usa temporalmente.
;Postcondiciones: El registro R9 no tendra efectos secundarios. El registro R7 sera alterado.
;Autor: Ver�nica Bernier
;Fecha: 3/14/2021
keepSubstractingMod10:
        sub.w   #10, R9
        cmp.w   #0, R9
        JGE     keepSubstractingMod10
        add.w   #10, R9
        mov.w   R9, R7                  ;R7 returns the "residuo" (result)
        pop     R9                      ;restore value
        ret

;Objetivo: Escuchar por input del boton derecho, para asi comenzar el proceso de reset el sistema.
;Precondiciones: El resultado de la operacion debe estar mostrado en el LCD.
;Postcondiciones: Todos los registros, la memoria del LCD, etc, seran restaurados a sus valores iniciales.
;Autor: Jose Biescas
;Fecha: 3/16/2021
restartLoop:
        MOV.B  &P1IN,R4        ;Reads if one of the pins have been pressed
        call   #delay
        and.b  #00000110B,R4
        CMP.B  #2,R4           ;Right button is pressed.
        JEQ    changeState   ;Change segment to the right
        JMP    restartLoop

return:
        ret

delay:
         mov    #0xFFFF, R10
next:
         dec    R10
         jnz    next
         ret

        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
        END
